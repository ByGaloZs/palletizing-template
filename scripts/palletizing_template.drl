# Palletizing script with Doosan robot
# Author: Mario Padilla

# ------------------- General setup -------------------

rot_mode = DR_ELR_ZYX

pallet_height = 150
box_height = 130

pick_pose = posx(-48.00, -1170.00, 360.00, -180.0, 0.0, -180.0, rot_mode)  
pick_approach = trans(pick_pose, [0, 0, -250, 0, 0, 0], DR_TOOL)
pick_retract = trans(pick_pose, [0, 0, -250, 0, 0, 0], DR_TOOL)

j_pick_aux = posj(87.13, -16.44, -101.66, 0.00, -61.90, 87.13)
j_place_aux = posj(162.15, -2.60, -87.32, 0.00, -90.07, 72.15)
robot_home = posj(90.00, 0.00, -90.00, 0.00, -90.00, 90.00)

vel_j_fast = 80  
acc_j_fast = 80  
vel_j_slow = 80  
acc_j_slow = 80  
vel_l_fast = 1000  
acc_l_fast = 1000  
vel_l_slow = 1000  
acc_l_slow = 1000  

do_vacuum_1 = 1
do_vacuum_2 = 2

# ------------------- Gripper control -------------------

def grip():
    set_digital_output(do_vacuum_1, ON)
    set_digital_output(do_vacuum_2, OFF)
    wait(1)

def release():
    set_digital_output(do_vacuum_1, OFF)
    set_digital_output(do_vacuum_2, ON)
    wait(0.5)

# ------------------- Safe home logic -------------------

def safe_home():
    current_pose, _ = get_current_posx()
    if current_pose[1] < 0 and current_pose[2] < 0:
        p0 = posx(0, 0, 100, 0, 0, 0)
        movel(p0, time=2, ref=DR_BASE, mod=DR_MV_MOD_REL)
        movej(j_place_aux, v=vel_j_slow, a=acc_j_slow, r=50)
    elif current_pose[1] < 0 and current_pose[2] >= 0:
        movej(j_place_aux, v=vel_j_slow, a=acc_j_slow, r=50)
    elif current_pose[1] >= 0 and current_pose[2] < 0:
        p0 = posx(0, 0, 100, 0, 0, 0)
        movel(p0, time=2, ref=DR_BASE, mod=DR_MV_MOD_REL)
        movej(j_pick_aux, v=vel_j_slow, a=acc_j_slow, r=50)
    elif current_pose[1] >= 0 and current_pose[2] >= 0:
        movej(j_pick_aux, v=vel_j_slow, a=acc_j_slow, r=50)
    movej(robot_home, v=vel_j_slow, a=acc_j_slow)

# ------------------- Pattern definition -------------------

drl_report_line(OFF)

levels = 9
boxes_per_level = 9  
total_boxes = boxes_per_level * levels  

pattern_a = [None] * boxes_per_level
pattern_b = [None] * boxes_per_level

# Pattern A
pattern_a[0] = posx(578.00, 1140.00, 260.00, 0.00, 0.00, -180.00, rot_mode)
pattern_a[1] = posx(578.00, 965.00, 260.00, 0.00, 0.00, -180.00, rot_mode)
pattern_a[2] = posx(578.00, 790.00, 260.00, 0.00, 0.00, -180.00, rot_mode)
pattern_a[3] = posx(578.00, 615.00, 260.00, 0.00, 0.00, -180.00, rot_mode)
pattern_a[4] = posx(578.00, 440.00, 260.00, 0.00, 0.00, -180.00, rot_mode)
pattern_a[5] = posx(578.00, 265.00, 260.00, 0.00, 0.00, -180.00, rot_mode)
pattern_a[6] = posx(578.00, 90.00, 260.00, 0.00, 0.00, -180.00, rot_mode)
pattern_a[7] = posx(90.00, 402.00, 260.00, -90.00, 0.00, -180.00, rot_mode)
pattern_a[8] = posx(90.00, 1212.00, 260.00, -90.00, 0.00, -180.00, rot_mode)

# Pattern B
pattern_b[0] = posx(403.00, 1140.00, 385.00, 0.00, 0.00, -180.00, rot_mode)
pattern_b[1] = posx(403.00, 965.00, 385.00, 0.00, 0.00, -180.00, rot_mode)
pattern_b[2] = posx(403.00, 790.00, 385.00, 0.00, 0.00, -180.00, rot_mode)
pattern_b[3] = posx(403.00, 615.00, 385.00, 0.00, 0.00, -180.00, rot_mode)
pattern_b[4] = posx(403.00, 440.00, 385.00, 0.00, 0.00, -180.00, rot_mode)
pattern_b[5] = posx(403.00, 265.00, 385.00, 0.00, 0.00, -180.00, rot_mode)
pattern_b[6] = posx(403.00, 90.00, 385.00, 0.00, 0.00, -180.00, rot_mode)
pattern_b[7] = posx(900.00, 402.00, 385.00, -90.00, 0.00, -180.00, rot_mode)
pattern_b[8] = posx(900.00, 1212.00, 385.00, -90.00, 0.00, -180.00, rot_mode)

# ------------------- Pose calculation -------------------

delta_app_a = [-50.00, -50.00, box_height, 0, 0, 0]
delta_app_b = [-50.00, -50.00, box_height, 0, 0, 0]
delta_ret = [0, 0, 50, 0, 0, 0]

place_poses = [None] * total_boxes
approach_poses = [None] * total_boxes
retract_poses = [None] * total_boxes

for level in range(levels):
    z = box_height * (level + 1)
    base_pattern = pattern_a if level % 2 == 0 else pattern_b
    for i in range(boxes_per_level):
        idx = level * boxes_per_level + i
        base_pose = base_pattern[i]
        rz = round(base_pose[3] / 90.0) * 90.0
        normalized = posx(base_pose[0], base_pose[1], base_pose[2], rz, base_pose[4], base_pose[5], rot_mode)
        place_poses[idx] = trans(normalized, [0, 0, z, 0, 0, 0], DR_BASE, DR_BASE)
        delta_app = delta_app_a if level % 2 == 0 else delta_app_b
        approach_poses[idx] = trans(place_poses[idx], delta_app, DR_BASE, DR_BASE)
        retract_poses[idx] = trans(place_poses[idx], delta_ret, DR_BASE, DR_BASE)

# ------------------- Main loop -------------------

drl_report_line(ON)
uf_pallet = 101

if tp_get_user_input("Continue pallet? / Restart pallet?", input_type=DR_VAR_BOOL):
    current_layer = int((System_counter / boxes_per_level) + 1)
    current_box = (System_counter % boxes_per_level) + 1
else:
    System_counter = 0

while True:
    safe_home()
    release()

    for i in range(System_counter, total_boxes):
        movej(j_pick_aux, v=vel_j_fast, a=acc_j_fast, r=10)
        movej(j_pick_aux, v=vel_j_slow, a=acc_j_slow, r=10)
        movel(pick_approach, vel=vel_l_slow, acc=acc_l_slow, ref=DR_BASE)
        movel(pick_pose, vel=vel_l_slow, acc=acc_l_slow, ref=DR_BASE)
        grip()
        movel(pick_retract, vel=vel_l_slow, acc=acc_l_slow, ref=DR_BASE)

        System_counter += 1

        movej(j_place_aux, v=vel_j_fast, a=acc_j_fast, r=10)
        base_approach = coord_transform(approach_poses[i], uf_pallet, DR_BASE)
        movej(j_place_aux, v=vel_j_slow, a=acc_j_slow, r=10)
        movel(base_approach, vel=vel_l_slow, acc=acc_l_slow, ref=DR_BASE)
        movel(place_poses[i], vel=vel_l_slow, acc=acc_l_slow, ref=uf_pallet)

        release()
        movel(retract_poses[i], vel=vel_l_slow, acc=acc_l_slow, ref=uf_pallet)
        movej(j_place_aux, v=vel_j_fast, a=acc_j_fast, r=10)

    System_counter = 0
